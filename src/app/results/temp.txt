<div>

    <div class="col-12" style="margin-top:3em;">
        <h2>Platforms for <span class="badge badge-pill badge-default" *ngFor="let subject of result_dropdown[0]">
                    {{subject}}
                </span></h2>
    </div>
    <div class="col-12 d-flex justify-content-center about" id="result_dropdown" style="margin-bottom:3em; text-align:left">

        <div class="col-md-8" style="padding:1em; background: #eee">
            <h3>Filter by:</h3>
            <p>
                <button *ngFor="let cat of filters" class="btn mb-3 mr-3" [ngClass]="this.filteredResults.includes( cat ) ? 'btn-success' : 'btn-danger'" (click)="toggleCat(cat)">{{cat}}
                </button>
            </p>
            <!--<form (ngSubmit)="onSubmit()" #myform="ngForm">
                <ul *ngFor="let cat of filters; let i=index">
                    <li class='form-group' style='list-style-type: none;'>
                        <label [class.selected]="cat.name.checked"><input id={{cat.name}} class="form-control" type="checkbox" value={{cat.isActive}} (change)="logCheckbox($event, cat.name)" name={{cat.name}} NgModel [(ngModel)]="cat.isActive" [checked]="cat.isActive"> {{cat.name}}</label>
                    </li>
                </ul>
            </form>-->
        </div>

    </div>

    <div style="margin-top: 20px" *ngIf="myform">
        <div>Form details:-</div>
        <pre>Is form submitted?: <br>{{myform.submitted | json}}</pre>
        <pre>submitted value: <br>{{myform.value | json}}</pre>

    </div>

    <div class="col-12 d-flex justify-content-center flex-wrap">
        <div class="col-md-8">
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Platform
                        </th>
                        <th>
                            Action
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <!--<ng-container *ngFor="let selection of selectedPlatforms">-->
                    <!--<tr *ngIf="start==1">
                            <td>{{selection[6]}}</td>
                        </tr>-->
                    <!--<ng-container *ngFor="let catty of convertToArray(myform.value | json)">-->
                    <!--This is in HTML {{catty}}-->
                    <tr *ngFor="let selection of selectedPlatforms">

                        <td [hidden]="!filteredResults.includes(selection[6])">this is {{ selection }}</td>
                        <!--<td [hidden]="!filteredResults.includes(selection[6])">{{ filteredResults.includes(selection[6]) }}</td>-->
                        <!--<td *ngIf="filters.includes(selection[6])">{{selection[6]}}</td>-->

                        <b>Filter value</b>: {{myform.value[selection[6]]}};
                        <td *ngIf="myform.value[selection[6]]"><b>Subject</b>: {{result_dropdown[0]}}; <b>Category</b>: {{selection[6]}}</td>

                    </tr>
                    <!--<tr *ngIf="selection[6] in catty">
                                <td class="text-left"><strong>{{selection[0]|maxlengthdoc:50}}</strong><br/><span class="badge badge-default">{{selection[6]|maxlengthdoc:50}}</span></td>
                                <td class="text-left"><a [routerLink]="['/platform/',selection[5]]" routerLinkActive="active" class="btn btn-primary">
                            More info
                        </a></td>
                            </tr>-->
                    <!--</ng-container>-->
                    <!--</ng-container>-->
                </tbody>
            </table>
        </div>
    </div>

</div>


 ngOnInit() {
//"---", "blog|media|news|articl|content|post|journal", "community|support|people|forum", "(text )?editor|interpreter|repl", "shop|commerce", "learn|tutorial|course|training| tips|example", "api|package|framework|librar|stack|licens|addon|app", "cloud|platform|service", "searchtools", "on?(-|\s)?demand|business|compan(y|ies)|enterprise", "manual|guide|docs", "design|galler|template|theme"
    //this.sevsubjects = [
    //  {name:"blog|media|news|articl|content|post|journal", isActive: true},
    //  {name:"learn|tutorial|course|training| tips|example", isActive: true}
    //]
    
    
    this.setResults(this.setFilters(this.result_dropdown), this.outputResult);
  }
  
  setFilters(result_dropdown) {
    //console.log("THIS IS results in setFilters ", results[1]);
    //console.log(typeof this.filters)
    this.filters = this.result_dropdown[1].slice();
    if( this.filteredResults.length === 0 ){
      this.filteredResults = this.result_dropdown[1].slice();
    } 
    console.log("in setFilter: values of filters", this.filters);
  } 
  
setResults(filterset_result_dropdown, callback){
  //callback(filterset_result_dropdown);
  console.log("FILTERER in setResult", filterset_result_dropdown) //OUTPUT: FILTERER in setResult undefined and stop reading for SUBJECTS, but read for CATEGORIES
    this.selectedPlatforms = [];
    this.platforms.forEach((plat) => {
  plat.forEach((platdetails) => {
    Object.keys(platdetails).forEach((platdetailskey) => {
      var platdetailsvalues = platdetails[platdetailskey]; 
      if (platdetailsvalues.category) {
     // console.log("key", a.$key, x);
      }
      //console.log("FILTERER in outputResult", results, results.map((cat)=>{console.log(cat); if(cat.isActive === true){return cat.name}},[]))
      if(platdetailsvalues.category){
        var relevance = 1;
        var prevalence = 1;
        var ranking = 1;
        if (relevance > 0 && typeof platdetails.subjects != 'undefined') {
          this.selectedPlatforms.push([platdetailsvalues.title, platdetailsvalues.category, relevance, prevalence, ranking, platdetails.$key, platdetailsvalues.category]);
          //console.log("title", value.title)
        }
      }
    })
  })
  this.selectedPlatforms = this.selectedPlatforms.sort((a,b)=> {
    if (a[4]<b[4]) {
      return 1
    } else if (a[4]>b[4]) {
      return -1
    } 
    return 0
  })
})  
callback(filterset_result_dropdown);
}

  outputResult(filterset_result_dropdown) {
    this.selectedPlatforms = [];
    console.log("INSIDE outputResult")
    this.platforms.forEach((plat) => {
  plat.forEach((platdetails) => {
    Object.keys(platdetails).forEach((platdetailskey) => {
      var platdetailsvalues = platdetails[platdetailskey];
      console.log("FILTERER in outputResult", filterset_result_dropdown, filterset_result_dropdown.filter((cat)=>{if(cat.isActive === true){return cat.name}},[]), filterset_result_dropdown.map((cat)=>{if(cat.isActive === true){return cat.name}},[]).indexOf(platdetailsvalues.category) != -1?true:false)
      if(filterset_result_dropdown.map((cat)=>{if(cat.isActive === true){return cat.name}},[]).indexOf(platdetailsvalues.category) != -1){
        var relevance = 1;
        var prevalence = 1;
        var ranking = 1;
        if (relevance > 0 && typeof platdetails.subjects != 'undefined') {
          this.start = 0;
          this.selectedPlatforms.push([platdetailsvalues.title, platdetailsvalues.category, relevance, prevalence, ranking, platdetails.$key, platdetailsvalues.category]);
          //console.log("title", value.title)
        }
      }
    })
  })
  this.selectedPlatforms = this.selectedPlatforms.sort((a,b)=> {
    if (a[4]<b[4]) {
      return 1
    } else if (a[4]>b[4]) {
      return -1
    } 
    return 0
  })
})
  }


   logCheckbox(event : any, cat: string): void {
     //console.log("THIS IS event ", event)
   //console.log(cat, document.getElementById(cat).attributes, document.getElementById(cat)['checked'])
   this.start = 0;
   if (document.getElementById(cat)['checked'] === true){
     //console.log(this.filters)
     this.filters.forEach(ssubs => {if(ssubs.name === cat){console.log("CAT DETECTED AS true"); ssubs.isActive = true}})
     //this.filters[cat] = true
   }else{
     //console.log(this.filters)
     this.filters.forEach(ssubs => {if(ssubs.name === cat){console.log("CAT DETECTED AS false"); ssubs.isActive = false}})
     //console.log(this.sevsubjects)
     //this.filters[cat] = false
   }

  }

  
  toggleCat( category ) {
    if( this.filteredResults.includes( category ) ) {
      this.filteredResults.splice( this.filteredResults.indexOf( category ), 1 )
    } else {
      this.filteredResults.push(category);
    }
  }


//onSubmit(){
//  console.log(this.mycheckbox)
//}


convertToArray(obj:any){
  obj = JSON.parse(obj);
  let tempobj = [];
  //console.log("IN convertToArray", Object.keys(obj).filter((k)=>{if(obj[k]){return k}}));
  tempobj = Object.keys(obj).filter((k)=>{if(obj[k]){return k;}})
  return tempobj;
}

//toggleCat(event, cat) {
  // console.log(event.target, cat)
  // event.target.classList.toggle("btn-success");
  // event.target.classList.toggle("btn-danger");
  
  // if (event.target.classList.contains("btn-danger")) {
  //   this.filters[cat]= false
  // } else {
  //   this.filters[cat] = true;
  // }
  
//}

calculateRelevance(subjects) {
}

calculatePrevalence(prevalence){
}

calculateRanking(relevance, prevalence) {
}





//  ngOnChanges(changes: SimpleChanges) {
//    console.log("RESULTS CURRENT VALUE IN ngOnChanges ", changes, changes.result_dropdown.currentValue);
// //   //console.log(this.sevsubjects)
// //   //console.log(changes, changes.sevsubjects);

//    if (changes.result_dropdown.currentValue != changes.result_dropdown.previousValue){
// // //    //https://stackoverflow.com/questions/39840457/how-to-store-token-in-local-or-session-storage-in-angular-2
// // //    //https://codepen.io/chrisenytc/pen/gyGcx
//      localStorage.setItem('selectedsubject', changes.result_dropdown.currentValue);
//     this.outputResult(this.filters);
// // //    //console.log("changes at ngOnChanges", typeof changes.results, changes.results[Object.keys(changes.results)[0]][0])
//    }
//      }